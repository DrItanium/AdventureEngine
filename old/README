The adventure engine is a back end system for handling adventure games. As with
most of my modern works the code uses an expert system to do the dirty work.
This is because the expert system makes different aspects of the adventure game
easy to do. 

Currently, this is in an experimental phase and is quite fluid in layout and
features. I probably will never have a super stable branch but a relatively
stable one. However, this may change with time. 


Folder layout:
System/ - C and CLIPS code for the base of the engine
  Backends/ - Contains platform specific implementations of provided functions
  Core/ - CLIPS runtime C code
  Initialization/ - Contains functions that are fired on application start
  Input/ - Contains functions to provide a standardized method for getting
           data from different input methods (keyboard, mouse, etc)
  Runtime/ - Base CLIPS code that the rest of the engine builds on top of.
             The code in here should be the first thing loaded on startup.
  Platform/ - CLIPS native functions that provide information about OS,
              architecture, and hardware that the adventure engine is running
              on.
application/ - Contains the entry point into a given adventure engine program
lib/ - Contains all of the user defined functions, templates, methods, and
       classes used by the adventure engine.
logic/ - Contains all the rules for the different modules that make up an
         adventure engine program. These rules are provided by the game
         designer.

Currently, it has two backends: Generic and Scummvm.

The Generic backend is the default backend and is used if the code is compiled
as a standalone project. The Scummvm backend is activated if the project is
added to a scummvm (version 1.5.0 or greater) source tree (appropriate
modifications needs to be made to several files as well) and compiled using
./configure ; make in scummvm. 
