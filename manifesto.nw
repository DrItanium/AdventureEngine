In order to understand what the devil I'm implementing it may be a good idea to
describe the ideas behind the overarching concept. There are several modules to
the core AdventureEngine: constants, core, configuration, prompt, world, and
main.
world.
<<*>>=
<<constants>>
<<core>>
<<configuration>>
<<prompt>>
<<world>>
<<main>>
@

The constants module is a very simple module, it acts to define constants that
find extremely useful such as default salience values like [[-10000]] and
[[10000]] as well as the default output router.
<<constants>>=
(defmodule constants
 (export defglobal ?ALL))
(defglobal constants
           ?*absolute-first-priority* = 10000
           ?*absolute-last-priority* = -10000
           ?*before-normal-priority* = 1
           ?*after-normal-priority* = -1
           ?*router-out* = t
           ?*engine-boot-prompt* = "Welcome to the adventure engine"
           ?*engine-shutdown-message* = "Shutting down!"
		   )
@

The AdventureEngine provides a world that the programmer defines things in.
By default, all things are unrelated and have no clue about each other. A core
concept in the AdventureEngine is the room. It is defined as having a set of
things contained with in it. 

The core module contains default abstract concepts used. Especially the base
type [[thing]]. A thing is the base type of all objects that interact with the
world defined by the adventure engine. By default, a thing has a description
and a title. 

<<core>>=
(defmodule core
 (export defclass
  thing))
(defclass core::thing
 "Base class of everything"
 (is-a USER)
 (slot description
  (visibility public)
  (type STRING))
 (slot title
  (visibility public)
  (type STRING)))
@


